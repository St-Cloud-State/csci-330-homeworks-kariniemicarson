* (not(equal 3(abs -3)))

NIL
* (/ (+ 8 12) 2)

10
* (+ (* 3 3) (* 4 4))

25
* (defun miles-per-gallon (initial-odometer-reading final-odometer-reading gallons-consumed)
  (/ (- final-odometer-reading initial-odometer-reading) gallons-consumed))

MILES-PER-GALLON
* (third '(the quick brown fox))

BROWN
* (list 2 'and 2 'is 4)

2 and 2 is 4
* (+ 1 (length (list t t t t)))

5
* (cons 'patrick '(seymour marvin))

patrick seymour marvin
* (cons 'patrick (list 'seymour 'marvin))

patrick seymour marvin
* (mystery '(dancing bear))

bear dancing
* (mystery 'dancing 'bear)

error
* (mystery '(zowie))

nil zowie
* (mystery (list 'first 'second))

second first

3.21

(defun speak (x y) (list ’all ’x ’is ’y))

There should not be quotes on x and y, they should be treated as variables.

(defun speak (x) (y) (list ’all x ’is y))

There should only be one parameter, but y is being read as a second parameter

(defun speak ((x) (y)) (list all ’x is ’y))

x and y should not be quoted, and all and is should be quoted. x and y are also 
nested in parenthesis, which make Lisp assume that they are lists.

3.25

(cons t nil)

(t)

error

(t)

nil

(eval nil)

nil